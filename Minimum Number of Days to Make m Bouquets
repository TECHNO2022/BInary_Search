//You are given an integer array bloomDay, an integer m and an integer k.

//You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

//The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

//Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        
        int n=bloomDay.length;
        
        for(int i=0;i<n;i++)
        {
            min=Math.min(min,bloomDay[i]);
            max=Math.max(max,bloomDay[i]);
        }
        
        if(m*k>n)
            return -1;
        
        while(min<max)
        {
            int mid=min+(max-min)/2;
            int x=possible(bloomDay,mid,k);
               if(x<m)
                {
                    min=mid+1;
                }
             else
                max=mid;
        }
        
        return min;
        
        
        
        
    }
    
    public int possible(int bloomday[],int mid,int k)
    {
        int bouquets=0;
        int allocatedflowers=0;
                int n=bloomday.length;

        for(int i=0;i<n;i++)
        {
            if(bloomday[i]<=mid)
            {
                allocatedflowers++;
            }
            else
            {
                allocatedflowers=0;
            }
            if(allocatedflowers==k)
            {
                bouquets++;
                allocatedflowers=0;
            }
        }
        
        return bouquets;
    }
}
