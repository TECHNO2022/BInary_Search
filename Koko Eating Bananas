//Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

//Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

//Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

//Return the minimum integer k such that she can eat all the bananas within h hours.

//Input: piles = [3,6,7,11], h = 8
//Output: 4

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        
        int s=0;
        int e=max(piles);
        int ans=0;
        
        
       while(s<=e)
       {
        int k = s + ((e - s) >> 1);
           if(possible(piles,k,h))
           {
               ans=k;
               e=k-1;
           }
           else
           {
               s=k+1;
           }
       }
        return ans;
        
        
        
    }
    public boolean possible(int piles[],int k,int h)
    {
        int c=0;
        for(int i:piles)
        {
            c+=(int)Math.ceil(i*1.0/k);
            
        }
        return c<=h;
    }
    public int max(int piles[])
    {
        int n=piles.length;
        int max=piles[0];
        for(int i=0;i<n;i++)
        {
            max=Math.max(piles[i],max);
        }
        return max;
    }
}
