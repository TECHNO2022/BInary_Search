//There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

//Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

//You must decrease the overall operation steps as much as possible.


class Solution {
    public boolean search(int[] nums, int target) {
        
        
                
        int n=nums.length;
        if(n==1)
        {
            if(nums[0]==target)
                return true;
        }
        if(n==2)
        {
            if(nums[0]==target || nums[1]==target)
                return true;
        }
        int h=n-1;
        
        int l=0;
        
        while(l<=h)
        {
            
     while (l< h && nums[l] == nums[l + 1])
        ++l;
      while (l < h && nums[h] == nums[h- 1])
        --h;
            int mid=(l+h)/2;
            //left side is sorted
            if(nums[mid]==target)
                return true;
            if(nums[l]<=nums[mid])
            {
                if(nums[mid]>=target && nums[l]<=target)
                {
                   h=mid-1; 
                }
                else
                {
                    l=mid+1;
                }
            }
            //right side is sorted
            else
            {
                if(nums[mid]<=target && nums[h]>=target)
                {
                   l=mid+1; 
                }
                else
                {
                    h=mid-1;
                }
 
            }
        }
    
        return false;

        
    }
}

 
