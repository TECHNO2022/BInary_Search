//Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

//Write an algorithm to minimize the largest sum among these m subarrays.

 

//Example 1:

//Input: nums = [7,2,5,10,8], m = 2
//Output: 18
//Explanation:
//There are four ways to split nums into two subarrays.
//The best way is to split it into [7,2,5] and [10,8],
//where the largest sum among the two subarrays is only 18.


class Solution {
    public int splitArray(int[] nums, int m) {
        
        int n=nums.length;
        int l=0;
        
        
        int h=0;
        for(int i=0;i<n;i++)
        {
            h=h+nums[i];
        }
        int res=-1;
        
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(isPossible(nums,mid,m))
            {
                res=mid;
                h=mid-1;
            }
            else
            l=mid+1;
        }
        
        return res;
            
        
    }
    public boolean isPossible(int nums[],int barrier,int k)
    {
        int allocatedpages=1;
        int pages=0;
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            if(nums[i]>barrier)
                return false;
            else if(pages+nums[i]>barrier)
            {
                allocatedpages++;
                pages=nums[i];
            }
            else
            {
                pages=pages+nums[i];
            }
                
            
        }
        System.out.println(allocatedpages);
        if(allocatedpages>k)
            return false;
        return true;
    }
}
